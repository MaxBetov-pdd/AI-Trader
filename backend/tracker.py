# backend/tracker.py
import asyncio
import time
from datetime import datetime, timedelta, timezone
import ccxt.async_support as ccxt
from sqlalchemy import create_engine, select, update
from sqlalchemy.orm import sessionmaker
from database import analyses

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–±–∏—Ä–∞–µ–º DATABASE_URL –∏–∑ database.py ---
from database import DATABASE_URL

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–ò–ù–•–†–û–ù–ù–´–ô –¥–≤–∏–∂–æ–∫, —Ç–∞–∫ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –ª–∏–Ω–µ–π–Ω—ã–π
# –ó–∞–º–µ–Ω—è–µ–º "+asyncpg" –Ω–∞ "" –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ psycopg2
sync_db_url = DATABASE_URL.replace("+asyncpg", "")
engine = create_engine(sync_db_url)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

async def run_tracker():
    print("üöÄ –¢—Ä–µ–∫–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")
    
    while True:
        # –ü–æ–º–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ä–∂–∏ –≤–Ω—É—Ç—Ä—å —Ü–∏–∫–ª–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫
        exchange = ccxt.binance()
        db_session = SessionLocal()
        try:
            query = select(analyses).where(analyses.c.status.in_(['active', 'activated']))
            signals_to_track = db_session.execute(query).fetchall()

            if not signals_to_track:
                print("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ—Ç. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
            else:
                symbols = list(set([s.symbol for s in signals_to_track]))
                print(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(signals_to_track)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
                
                tickers = await exchange.fetch_tickers(symbols)
                
                for signal in signals_to_track:
                    current_price = tickers[signal.symbol]['last']
                    now = datetime.now(timezone.utc)

                    if signal.status == 'active':
                        # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä, –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω
                        if signal.entry_price != 'Market':
                            is_long_activation = signal.direction == 'Long' and current_price <= float(signal.entry_price)
                            is_short_activation = signal.direction == 'Short' and current_price >= float(signal.entry_price)

                            if is_long_activation or is_short_activation:
                                print(f"‚úÖ –°–∏–≥–Ω–∞–ª #{signal.id} ({signal.symbol}) –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ø–æ —Ü–µ–Ω–µ {current_price}")
                                update_query = update(analyses).where(analyses.c.id == signal.id).values(status='activated', entry_timestamp=now)
                                db_session.execute(update_query)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø—Ä–æ—Ç—É—Ö–∞–Ω–∏–µ" (–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
                        if now > signal.timestamp.replace(tzinfo=timezone.utc) + timedelta(hours=signal.invalidation_hours):
                            print(f"‚åõ –°–∏–≥–Ω–∞–ª #{signal.id} ({signal.symbol}) –ò–°–¢–ï–ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                            update_query = update(analyses).where(analyses.c.id == signal.id).values(status='expired', closed_timestamp=now)
                            db_session.execute(update_query)

                    elif signal.status == 'activated':
                        is_tp_hit = (signal.direction == 'Long' and current_price >= signal.take_profit) or \
                                    (signal.direction == 'Short' and current_price <= signal.take_profit)
                        is_sl_hit = (signal.direction == 'Long' and current_price <= signal.stop_loss) or \
                                    (signal.direction == 'Short' and current_price >= signal.stop_loss)

                        if is_tp_hit:
                            print(f"üéØ –¢–ï–ô–ö-–ü–†–û–§–ò–¢ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ #{signal.id} ({signal.symbol}) –ø–æ —Ü–µ–Ω–µ {current_price}")
                            update_query = update(analyses).where(analyses.c.id == signal.id).values(status='take_profit_hit', closed_timestamp=now)
                            db_session.execute(update_query)
                        elif is_sl_hit:
                            print(f"üõ°Ô∏è –°–¢–û–ü-–õ–û–°–° –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ #{signal.id} ({signal.symbol}) –ø–æ —Ü–µ–Ω–µ {current_price}")
                            update_query = update(analyses).where(analyses.c.id == signal.id).values(status='stop_loss_hit', closed_timestamp=now)
                            db_session.execute(update_query)
                
                db_session.commit()

        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
            db_session.rollback()
        finally:
            db_session.close()
            await exchange.close()

        # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(300)

if __name__ == "__main__":
    asyncio.run(run_tracker())
