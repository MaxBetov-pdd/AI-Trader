# -*- coding: utf-8 -*-

"""
AI-–¢—Ä–µ–π–¥–µ—Ä v10.0 (Robust Final).
- –£—Å–∏–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤.
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ –∏ –≤—ã–∑–æ–≤–µ API.
- –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è, –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è.
"""

import os
import json
import pandas as pd
from collections import Counter
import mplfinance as mpf
import ccxt
import google.generativeai as genai
from dotenv import load_dotenv
from rich.console import Console
from rich.panel import Panel
from rich.text import Text

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
load_dotenv()
try:
    genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
    exchange = ccxt.binance()
    console = Console()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: {e}")
    exit()

# <--- –ë–õ–û–ö –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô --->
def calculate_rsi(series: pd.Series, length: int = 14) -> pd.Series:
    delta = series.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.ewm(com=length - 1, min_periods=length).mean()
    avg_loss = loss.ewm(com=length - 1, min_periods=length).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def calculate_bbands(series: pd.Series, length: int = 20, std: int = 2):
    middle_band = series.rolling(window=length).mean()
    std_dev = series.rolling(window=length).std()
    upper_band = middle_band + (std_dev * std)
    lower_band = middle_band - (std_dev * std)
    return upper_band, lower_band

def calculate_atr(df, length=14):
    high_low = df['high'] - df['low']
    high_close = (df['high'] - df['close'].shift()).abs()
    low_close = (df['low'] - df['close'].shift()).abs()
    tr = high_low.combine(high_close, max).combine(low_close, max)
    atr = tr.ewm(alpha=1/length, adjust=False).mean()
    return atr

def calculate_adx(df, length=14):
    df['ATR'] = calculate_atr(df, length)
    plus_dm = df['high'].diff()
    minus_dm = df['low'].diff()
    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0
    plus_di = 100 * (plus_dm.ewm(alpha=1/length, adjust=False).mean() / df['ATR'])
    minus_di = 100 * (abs(minus_dm.ewm(alpha=1/length, adjust=False).mean()) / df['ATR'])
    dx = 100 * (abs(plus_di - minus_di) / (abs(plus_di + minus_di) + 1e-6))
    adx = dx.ewm(alpha=1/length, adjust=False).mean()
    df[f'ADX_{length}'] = adx
    return df

# --- –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –°–¢–†–ê–¢–ï–ì–ò–ò ---
def select_strategy(config: dict) -> dict:
    console.print(Panel("[bold]–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é[/bold]", expand=False))
    strategies = config['strategies']
    strategy_keys = list(strategies.keys())
    for i, key in enumerate(strategy_keys):
        strategy = strategies[key]
        console.print(f"[cyan]{i+1}. {strategy['name']}[/cyan]")
        console.print(f"   [dim]{strategy['description']}[/dim]\n")
    while True:
        try:
            choice = int(console.input("[bold]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: [/bold]"))
            if 1 <= choice <= len(strategy_keys):
                chosen_key = strategy_keys[choice - 1]
                console.print(f"\n[green]–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: [bold]{strategies[chosen_key]['name']}[/bold][/green]")
                return strategies[chosen_key]
            else:
                console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.[/red]")
        except ValueError:
            console.print("[red]–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.[/red]")

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def fetch_and_plot(symbol: str, timeframe: str, run_id: int) -> str:
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=200)
        if len(ohlcv) < 50:
            console.print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏–∫.")
            return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df = calculate_adx(df, length=14)
        latest_adx = df.iloc[-1]['ADX_14'] if not df.empty and 'ADX_14' in df.columns else 20
        params = {"rsi_length": 21, "bb_length": 25, "bb_std": 2.5} if latest_adx > 25 else {"rsi_length": 14, "bb_length": 20, "bb_std": 2.0}
        params["mode"] = "Trend" if latest_adx > 25 else "Flat/Range"
        df['RSI'] = calculate_rsi(df['close'], length=params["rsi_length"])
        df['BBU'], df['BBL'] = calculate_bbands(df['close'], length=params["bb_length"], std=params["bb_std"])
        filepath = f"chart_{symbol.replace('/', '')}_{timeframe}_{run_id}.png"
        rsi_title = f"RSI ({params['rsi_length']}) - {params['mode']} Mode"
        all_plots = [mpf.make_addplot(df['BBU'], color='cyan', width=0.7), mpf.make_addplot(df['BBL'], color='cyan', width=0.7), mpf.make_addplot(df['RSI'], panel=1, color='purple', title=rsi_title, ylim=(0, 100))]
        mpf.plot(df, type='candle', style='charles', title=f"\n{symbol} - {timeframe}", mav=(9, 21, 50), volume=True, figratio=(16, 9), addplot=all_plots, savefig=dict(fname=filepath, dpi=100))
        
        if os.path.exists(filepath) and os.path.getsize(filepath) > 1024:
             return filepath
        else:
             console.print(f"‚ùå –û—à–∏–±–∫–∞: –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {timeframe}.")
             if os.path.exists(filepath): os.remove(filepath)
             return None
    except Exception as e:
        console.print(f"‚ùå (–ü—Ä–æ–≥–æ–Ω {run_id}) –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {timeframe}: {e}")
        return None

def analyze_with_gemini(symbol: str, image_paths: list, run_id: int, prompt_file: str):
    console.print(f"üß† (–ü—Ä–æ–≥–æ–Ω {run_id}) –ê–Ω–∞–ª–∏–∑ –≤ Gemini –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    try:
        with open(prompt_file, 'r', encoding='utf-8') as f:
            prompt_template = f.read()
        prompt = prompt_template.format(symbol=symbol)
    except FileNotFoundError:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_file}[/bold red]")
        return None

    # --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò –ë–û–õ–ï–ï –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ---
    uploaded_files = []
    for path in image_paths:
        try:
            console.print(f"  [dim]–ó–∞–≥—Ä—É–∑–∫–∞ {path}...[/dim]")
            uploaded_files.append(genai.upload_file(path=path))
        except Exception as e:
            console.print(f"‚ùå [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {path}: {e}[/bold red]")
            # –†–µ—à–∞–µ–º –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å, –∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    
    if not uploaded_files:
        console.print("‚ùå [bold red]–ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/bold red]")
        return None
    # ----------------------------------------------------

    model = genai.GenerativeModel('gemini-2.5-pro')
    safety_settings = { 'HARM_CATEGORY_HARASSMENT': 'BLOCK_NONE', 'HARM_CATEGORY_HATE_SPEECH': 'BLOCK_NONE', 'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'BLOCK_NONE', 'HARM_CATEGORY_DANGEROUS_CONTENT': 'BLOCK_NONE' }
    
    try:
        response = model.generate_content([prompt] + uploaded_files, safety_settings=safety_settings)
        raw_text = response.text
        cleaned_text = raw_text.strip().replace('```json', '').replace('```', '')
        return json.loads(cleaned_text)
    except ValueError: # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ response.text –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        console.print(f"‚ùå [bold red]–û—Ç–≤–µ—Ç –æ—Ç Gemini –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.[/bold red]")
        if hasattr(response, 'prompt_feedback'):
             console.print(f"   [bold]–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:[/bold] {response.prompt_feedback}")
        return None
    except json.JSONDecodeError as e:
        console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:[/bold red] {e}")
        return None
    except Exception as e:
        console.print(f"‚ùå [bold red]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API:[/bold red] {e}")
        return None
    finally:
        for p in image_paths: # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π
            if p and os.path.exists(p): os.remove(p)

def display_results(result: dict, confidence: str):
    title = f"[bold]–¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –æ—Ç AI {confidence}[/bold]"
    direction = result.get("direction", "N/A")
    color = "green" if direction == "Long" else "red"
    panel_content = Text()
    panel_content.append(f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {result.get('symbol', 'N/A')}\n", style="bold white")
    panel_content.append(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", style="white")
    panel_content.append(f"{direction}\n", style=f"bold {color}")
    panel_content.append("-" * 30 + "\n", style="dim")
    panel_content.append(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result.get('analysis_summary', 'N/A')}\n\n", style="italic white")
    entry_type = result.get("entry_type", "Limit")
    entry_price = result.get("entry_price")
    panel_content.append(f"–í—Ö–æ–¥: –ü–æ —Ä—ã–Ω–∫—É (Market)\n", style="bold cyan") if entry_type.lower() == 'market' else panel_content.append(f"–í—Ö–æ–¥ (Limit): {entry_price}\n", style="bold cyan")
    panel_content.append(f"–ü—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞: {result.get('entry_reason', 'N/A')}\n\n", style="cyan")
    panel_content.append(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {result.get('stop_loss')}\n", style="bold red")
    panel_content.append(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {result.get('take_profit')}\n", style="bold green")
    panel_content.append(f"–†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: {result.get('risk_reward_ratio', 'N/A')}\n\n", style="yellow")
    panel_content.append(f"‚ùóÔ∏è –ò–¥–µ—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ {result.get('invalidation_hours', 'N/A')} —á–∞—Å–æ–≤.", style="bold magenta")
    console.print(Panel(panel_content, title=title, border_style=color))

# --- –ì–õ–ê–í–ù–´–ô –ë–õ–û–ö –ò–°–ü–û–õ–ù–ï–ù–ò–Ø ---
if __name__ == "__main__":
    console.print(Panel("[bold cyan]AI-–¢—Ä–µ–π–¥–µ—Ä v10.0 (Robust Final) –∑–∞–ø—É—â–µ–Ω.[/bold cyan]", expand=False))
    if not os.getenv("GOOGLE_API_KEY"):
        console.print("[bold red]–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.[/bold red]")
        exit()
    
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        strategy = select_strategy(config)
        pair_input = console.input("[bold]–í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT): [/bold]").upper()
        NUMBER_OF_RUNS = 3
        results = []
        console.print(f"\n[yellow]–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –¥–ª—è [bold]{pair_input}[/bold] —Å —Ç—Ä–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...[/yellow]")
        
        for i in range(1, NUMBER_OF_RUNS + 1):
            timeframes = strategy['timeframes']
            prompt_file = strategy['prompt_file']
            chart_paths = [fetch_and_plot(pair_input, tf, run_id=i) for tf in timeframes]
            
            valid_chart_paths = [p for p in chart_paths if p]
            if len(valid_chart_paths) < len(timeframes):
                 console.print(f"‚ö†Ô∏è (–ü—Ä–æ–≥–æ–Ω {i}) –ù–µ –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –∞–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º.")

            if valid_chart_paths:
                trade_idea = analyze_with_gemini(pair_input, valid_chart_paths, run_id=i, prompt_file=prompt_file)
                if trade_idea and trade_idea.get('direction') and trade_idea.get('direction').lower() != 'none':
                    results.append(trade_idea)
            else:
                console.print(f"‚ùå (–ü—Ä–æ–≥–æ–Ω {i}) –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω.")
        
        console.print("\n[yellow]–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å...[/yellow]\n")

        if not results:
            console.print(Panel("–ò–ò –Ω–µ –Ω–∞—à–µ–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–∞–ø–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.", title="[bold]–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞[/bold]", border_style="yellow"))
        else:
            directions = [r.get('direction') for r in results]
            direction_counts = Counter(directions)
            most_common_direction, count = direction_counts.most_common(1)[0]
            if count >= 2:
                confident_result = next(r for r in results if r.get('direction') == most_common_direction)
                confidence_str = f"[green]–£–í–ï–†–ï–ù–ù–´–ô ({count}/{len(results)})[/green]"
                display_results(confident_result, confidence=confidence_str)
            else:
                warning_text = Text()
                warning_text.append("–†—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–ê–Ø.\n\n", style="bold yellow")
                warning_text.append("–ò–ò –¥–∞–ª –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n")
                for direction, num in direction_counts.items():
                    warning_text.append(f"- {direction}: {num} —Ä–∞–∑(–∞)\n", style="yellow")
                warning_text.append("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–æ–∫ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —è—Å–Ω–æ—Å—Ç–∏.", style="bold")
                console.print(Panel(warning_text, title="[bold red]–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï[/bold red]", border_style="red"))

    except KeyboardInterrupt:
        console.print("\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
    except Exception as e:
        console.print(f"\n[bold red]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
        import traceback
        traceback.print_exc() # –î–æ–±–∞–≤–∏–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    
    console.print(Panel("[bold yellow]‚ö†Ô∏è –ü–û–ú–ù–ò–¢–ï: –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º...", title="[red]–î–∏—Å–∫–ª–µ–π–º–µ—Ä[/red]", border_style="red"))
