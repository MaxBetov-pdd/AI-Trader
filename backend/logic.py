# -*- coding: utf-8 -*-
# –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ backend/logic.py (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–ª—è Matplotlib)

import matplotlib
matplotlib.use('Agg') # <-- –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≥–æ–≤–æ—Ä–∏–º Matplotlib –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GUI

import os
import json
import pandas as pd
from collections import Counter
import mplfinance as mpf
import ccxt
import google.generativeai as genai
from dotenv import load_dotenv
from rich.console import Console

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
# (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
load_dotenv()
try:
    genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
    exchange = ccxt.binance()
    console = Console()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: {e}")
    exit()

# <--- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò --->
# (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def calculate_rsi(series: pd.Series, length: int = 14) -> pd.Series:
    delta = series.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.ewm(com=length - 1, min_periods=length).mean()
    avg_loss = loss.ewm(com=length - 1, min_periods=length).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def calculate_bbands(series: pd.Series, length: int = 20, std: int = 2):
    middle_band = series.rolling(window=length).mean()
    std_dev = series.rolling(window=length).std()
    upper_band = middle_band + (std_dev * std)
    lower_band = middle_band - (std_dev * std)
    return upper_band, lower_band

def calculate_atr(df, length=14):
    high_low = df['high'] - df['low']
    high_close = (df['high'] - df['close'].shift()).abs()
    low_close = (df['low'] - df['close'].shift()).abs()
    tr = high_low.combine(high_close, max).combine(low_close, max)
    atr = tr.ewm(alpha=1/length, adjust=False).mean()
    return atr

def calculate_adx(df, length=14):
    df['ATR'] = calculate_atr(df, length)
    plus_dm = df['high'].diff()
    minus_dm = df['low'].diff()
    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0
    plus_di = 100 * (plus_dm.ewm(alpha=1/length, adjust=False).mean() / df['ATR'])
    minus_di = 100 * (abs(minus_dm.ewm(alpha=1/length, adjust=False).mean()) / df['ATR'])
    dx = 100 * (abs(plus_di - minus_di) / (abs(plus_di + minus_di) + 1e-6))
    adx = dx.ewm(alpha=1/length, adjust=False).mean()
    df[f'ADX_{length}'] = adx
    return df

# <--- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò --->
# (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def fetch_and_plot(symbol: str, timeframe: str, run_id: int) -> str:
    try:
        # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        ticker = exchange.fetch_ticker(symbol)
        print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è {symbol}: {ticker['last']}")
        
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=200)
        if len(ohlcv) < 50:
            console.print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏–∫.")
            return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df = calculate_adx(df, length=14)
        latest_adx = df.iloc[-1]['ADX_14'] if not df.empty and 'ADX_14' in df.columns else 20
        params = {"rsi_length": 21, "bb_length": 25, "bb_std": 2.5} if latest_adx > 25 else {"rsi_length": 14, "bb_length": 20, "bb_std": 2.0}
        params["mode"] = "Trend" if latest_adx > 25 else "Flat/Range"
        df['RSI'] = calculate_rsi(df['close'], length=params["rsi_length"])
        df['BBU'], df['BBL'] = calculate_bbands(df['close'], length=params["bb_length"], std=params["bb_std"])
        
        os.makedirs("temp_charts", exist_ok=True)
        filepath = f"temp_charts/chart_{symbol.replace('/', '')}_{timeframe}_{run_id}.png"
        rsi_title = f"RSI ({params['rsi_length']}) - {params['mode']} Mode"
        all_plots = [mpf.make_addplot(df['BBU'], color='cyan', width=0.7), mpf.make_addplot(df['BBL'], color='cyan', width=0.7), mpf.make_addplot(df['RSI'], panel=1, color='purple', title=rsi_title, ylim=(0, 100))]
        mpf.plot(df, type='candle', style='charles', title=f"\n{symbol} - {timeframe}", mav=(9, 21, 50), volume=True, figratio=(16, 9), addplot=all_plots, savefig=dict(fname=filepath, dpi=100))
        
        if os.path.exists(filepath) and os.path.getsize(filepath) > 1024:
            return filepath
        else:
            console.print(f"‚ùå –û—à–∏–±–∫–∞: –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {timeframe}.")
            if os.path.exists(filepath): os.remove(filepath)
            return None
    except Exception as e:
        console.print(f"‚ùå (–ü—Ä–æ–≥–æ–Ω {run_id}) –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {timeframe}: {e}")
        return None

def analyze_with_gemini(symbol: str, image_paths: list, run_id: int, prompt_file: str):
    console.print(f"üß† (–ü—Ä–æ–≥–æ–Ω {run_id}) –ê–Ω–∞–ª–∏–∑ –≤ Gemini –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    try:
        with open(prompt_file, 'r', encoding='utf-8') as f:
            prompt_template = f.read()
        prompt = prompt_template.format(symbol=symbol)
    except FileNotFoundError:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_file}[/bold red]")
        return None

    uploaded_files = []
    for path in image_paths:
        try:
            console.print(f"  [dim]–ó–∞–≥—Ä—É–∑–∫–∞ {path}...[/dim]")
            uploaded_files.append(genai.upload_file(path=path))
        except Exception as e:
            console.print(f"‚ùå [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {path}: {e}[/bold red]")
    
    if not uploaded_files:
        console.print("‚ùå [bold red]–ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/bold red]")
        return None

    model = genai.GenerativeModel('gemini-2.5-pro')
    safety_settings = { 'HARM_CATEGORY_HARASSMENT': 'BLOCK_NONE', 'HARM_CATEGORY_HATE_SPEECH': 'BLOCK_NONE', 'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'BLOCK_NONE', 'HARM_CATEGORY_DANGEROUS_CONTENT': 'BLOCK_NONE' }
    
    try:
        response = model.generate_content([prompt] + uploaded_files, safety_settings=safety_settings)
        raw_text = response.text
        cleaned_text = raw_text.strip().replace('```json', '').replace('```', '')
        return json.loads(cleaned_text)
    except Exception as e:
        console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:[/bold red] {e}")
        if hasattr(response, 'prompt_feedback'):
             console.print(f"    [bold]–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:[/bold] {response.prompt_feedback}")
        return None
    finally:
        for uploaded_file in uploaded_files:
            genai.delete_file(uploaded_file.name)
            console.print(f"  [dim]–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª Gemini: {uploaded_file.name}[/dim]")
        for p in image_paths:
            if p and os.path.exists(p): os.remove(p)

def run_full_analysis(pair: str, strategy_key: str):
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        strategy = config['strategies'][strategy_key]
    except (FileNotFoundError, KeyError):
        return {"error": f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_key}' –∏–ª–∏ config.json –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}

    NUMBER_OF_RUNS = 3
    results = []
    
    for i in range(1, NUMBER_OF_RUNS + 1):
        timeframes = strategy['timeframes']
        prompt_file = strategy['prompt_file']
        chart_paths = [fetch_and_plot(pair, tf, run_id=i) for tf in timeframes]
        
        valid_chart_paths = [p for p in chart_paths if p]
        if not valid_chart_paths:
            console.print(f"‚ùå (–ü—Ä–æ–≥–æ–Ω {i}) –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω.")
            continue

        trade_idea = analyze_with_gemini(pair, valid_chart_paths, run_id=i, prompt_file=prompt_file)
        if trade_idea and trade_idea.get('direction') and trade_idea.get('direction').lower() != 'none':
            results.append(trade_idea)

    if not results:
        return {"status": "no_signal", "message": "–ò–ò –Ω–µ –Ω–∞—à–µ–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–∞–ø–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."}

    directions = [r.get('direction') for r in results]
    direction_counts = Counter(directions)
    most_common_direction, count = direction_counts.most_common(1)[0]
    
    if count >= 2:
        confident_result = next(r for r in results if r.get('direction') == most_common_direction)
        confident_result['status'] = 'success'
        confident_result['consensus'] = f"{count}/{len(results)}"
        return confident_result
    else:
        return {
            "status": "ambiguous", 
            "message": "–†—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–ê–Ø. –ò–ò –¥–∞–ª –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.",
            "details": dict(direction_counts)
        }
