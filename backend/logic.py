# backend/logic.py

import matplotlib
matplotlib.use('Agg')

import os
import json # <--- –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢
import pandas as pd
from collections import Counter
import mplfinance as mpf
import ccxt
import google.generativeai as genai
from dotenv import load_dotenv
from rich.console import Console
import re
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
load_dotenv()
try:
    genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
    exchange = ccxt.binance()
    console = Console()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: {e}")
    exit()

# <--- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò-–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´ --->
def calculate_rsi(series: pd.Series, length: int = 14) -> pd.Series:
    delta = series.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.ewm(com=length - 1, min_periods=length).mean()
    avg_loss = loss.ewm(com=length - 1, min_periods=length).mean()
    if avg_loss.empty or (avg_loss == 0).all():
        return pd.Series(100.0, index=series.index)
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def calculate_bbands(series: pd.Series, length: int = 20, std: int = 2):
    middle_band = series.rolling(window=length).mean()
    std_dev = series.rolling(window=length).std()
    upper_band = middle_band + (std_dev * std)
    lower_band = middle_band - (std_dev * std)
    return upper_band, lower_band

def calculate_atr(df, length=14):
    high_low = df['high'] - df['low']
    high_close = (df['high'] - df['close'].shift()).abs()
    low_close = (df['low'] - df['close'].shift()).abs()
    tr = high_low.combine(high_close, max).combine(low_close, max)
    atr = tr.ewm(alpha=1/length, adjust=False).mean()
    return atr

# <--- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò --- >

def fetch_and_plot(symbol: str, timeframe: str, run_id: int) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å MAV, RSI –∏ BBands.
    """
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=200)
        if len(ohlcv) < 50:
            return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)

        os.makedirs("temp_charts", exist_ok=True)

        df['RSI'] = calculate_rsi(df['close'])
        df['BBU'], df['BBL'] = calculate_bbands(df['close'])

        addplots = [
            mpf.make_addplot(df['BBU'], color='cyan', width=0.7),
            mpf.make_addplot(df['BBL'], color='cyan', width=0.7),
            mpf.make_addplot(df['RSI'], panel=1, color='purple', title="RSI", ylim=(0, 100))
        ]

        plot_kwargs = dict(type='candle', style='charles', volume=True, figratio=(16, 9), addplot=addplots)
        filepath = f"temp_charts/initial_{symbol.replace('/', '')}_{timeframe}_{run_id}.png"
        plot_kwargs['title'] = f"Initial Analysis for {symbol} - {timeframe}"
        plot_kwargs['mav'] = (9, 21, 50)

        mpf.plot(df, **plot_kwargs, savefig=dict(fname=filepath, dpi=100))
        return filepath if os.path.exists(filepath) else None
    except Exception as e:
        console.print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {timeframe}: {e}")
        return None

def clean_json_response(raw_text: str) -> dict:
    """–û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –µ–≥–æ."""
    match = re.search(r'```json\s*(\{.*?\})\s*```', raw_text, re.DOTALL)
    cleaned_text = match.group(1) if match else raw_text.replace('```', '').strip()
    try:
        return json.loads(cleaned_text)
    except json.JSONDecodeError as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}\n   –¢–µ–∫—Å—Ç: {cleaned_text}")
        return None

def analyze_with_gemini(symbol: str, image_paths: list, run_id: int, prompt_file: str, **kwargs):
    console.print(f"üß† (–ü—Ä–æ–≥–æ–Ω {run_id}) –í—ã–∑–æ–≤ Gemini —Å –ø—Ä–æ–º–ø—Ç–æ–º '{prompt_file}'...")
    try:
        with open(prompt_file, 'r', encoding='utf-8') as f:
            prompt_template = f.read()
        prompt = prompt_template.format(symbol=symbol, **kwargs)
    except FileNotFoundError:
        console.print(f"‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_file}")
        return None

    uploaded_files = [genai.upload_file(path=p) for p in image_paths if p and os.path.exists(p)]
    if not uploaded_files:
        return None

    model = genai.GenerativeModel('gemini-2.5-pro')
    safety_settings = {k: 'BLOCK_NONE' for k in ['HARM_CATEGORY_HARASSMENT', 'HARM_CATEGORY_HATE_SPEECH', 'HARM_CATEGORY_SEXUALLY_EXPLICIT', 'HARM_CATEGORY_DANGEROUS_CONTENT']}
    
    try:
        max_retries = 3
        for attempt in range(max_retries):
            try:
                response = model.generate_content([prompt] + uploaded_files, safety_settings=safety_settings)
                
                if not response.parts:
                    console.print(f"‚ùå [bold red]–û—Ç–≤–µ—Ç –æ—Ç Gemini –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (finish_reason: {response.candidates[0].finish_reason}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–≥–æ–Ω.[/bold red]")
                    return None
                
                return clean_json_response(response.text)

            except Exception as e:
                console.print(f"üü° –û—à–∏–±–∫–∞ API Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                if attempt < max_retries - 1:
                    time.sleep(5)
                else:
                    console.print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")
                    return None
    finally:
        for f in uploaded_files:
            try:
                genai.delete_file(f.name)
            except Exception as e:
                console.print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {f.name}: {e}")

def run_full_analysis(pair: str, strategy_key: str):
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        strategy = config['strategies'][strategy_key]
    except (FileNotFoundError, KeyError):
        return {"error": f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

    console.print(f"\n[bold cyan]--- –ü–æ–∏—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –¥–ª—è {pair} ---[/bold cyan]")
    try:
        current_price = exchange.fetch_ticker(pair)['last']
    except Exception as e:
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {pair}: {e}"}

    NUMBER_OF_RUNS = 3
    results = []
    chart_paths_for_all_runs = []
    timeframes = strategy['timeframes']
    prompt_file = strategy['prompt_file']

    for i in range(1, NUMBER_OF_RUNS + 1):
        chart_paths = [fetch_and_plot(pair, tf, i) for tf in timeframes]
        valid_charts = [p for p in chart_paths if p]
        
        if valid_charts:
            chart_paths_for_all_runs.extend(valid_charts)
            trade_idea = analyze_with_gemini(pair, valid_charts, i, prompt_file, current_price=current_price)
            if trade_idea and trade_idea.get('direction', 'None').lower() != 'none':
                results.append(trade_idea)

    if not results:
        for p in set(chart_paths_for_all_runs): 
            if os.path.exists(p): os.remove(p)
        return {"status": "no_signal", "message": "–ò–ò –Ω–µ –Ω–∞—à–µ–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–∞–ø–æ–≤."}

    directions = [r.get('direction') for r in results]
    direction_counts = Counter(directions)
    
    if not direction_counts:
        for p in set(chart_paths_for_all_runs): 
            if os.path.exists(p): os.remove(p)
        return {"status": "no_signal", "message": "–ü–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –ò–ò –Ω–µ –¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."}
        
    most_common_direction, count = direction_counts.most_common(1)[0]

    if count < 2:
        for p in set(chart_paths_for_all_runs): 
            if os.path.exists(p): os.remove(p)
        return {"status": "ambiguous", "message": "–†—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–ê–Ø. –ò–ò –¥–∞–ª –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.", "details": dict(direction_counts)}

    confident_result = next(r for r in results if r.get('direction') == most_common_direction)
    
    console.print(f"\n[bold green]--- –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–∞–π–¥–µ–Ω: {count}/{len(results)} –∑–∞ {most_common_direction} ---[/bold green]")
    
    final_result = confident_result
    final_result.update({
        'status': 'success',
        'chart_images': [os.path.basename(p) for p in set(chart_paths_for_all_runs) if p],
        'consensus': f"{count}/{len(results)}"
    })

    # –ù–µ —É–¥–∞–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É—Å–ø–µ–ª –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å
    # for p in set(chart_paths_for_all_runs):
    #     if os.path.exists(p):
    #         os.remove(p)

    return final_result
